{-# LANGUAGE FlexibleInstances #-}

-- (c) Alex McLean and contributors 2022
-- Shared under the terms of the GNU Public License v3.0

-- Please do not edit this file directly, it's generated from
-- bin/generate-composers.hs

module Sound.Tidal.Compose where

import Prelude hiding ((<*), (*>))
import Control.Monad (forM)
import Data.Bits

import qualified Data.Map.Strict as Map

import Sound.Tidal.Signal

-- ************************************************************ --
-- Hack to allow 'union' to be used on any value

-- class for types that support a left-biased union
class Unionable a where
  union :: a -> a -> a

-- default union is just to take the left hand side..
instance Unionable a where
  union = const

instance {-# OVERLAPPING #-} Unionable ValueMap where
  union = Map.union

-- ************************************************************ --

opMix :: Applicative t => (a -> b -> c) -> t a -> t b -> t c
opMix f a b = f <$> a <*> b

opIn :: (a -> b -> c) -> Signal a -> Signal b -> Signal c
opIn f a b = f <$> a <* b
  
opOut :: (a -> b -> c) -> Signal a -> Signal b -> Signal c
opOut f a b = f <$> a *> b

opSqueeze :: (a -> b -> c) -> Signal a -> Signal b -> Signal c
opSqueeze f a b = squeezeJoin $ fmap (\a -> fmap (\b -> f a b)  b) a
  
opSqueezeOut :: (a -> b -> c) -> Signal a -> Signal b -> Signal c
opSqueezeOut f pata patb = squeezeJoin $ fmap (\a -> fmap (\b -> f b a)  pata) patb

opTrig :: (a -> b -> c) -> Signal a -> Signal b -> Signal c
opTrig f a b = trigJoin $ fmap (\a -> fmap (\b -> f a b)  b) a
  
opTrigZero :: (a -> b -> c) -> Signal a -> Signal b -> Signal c
opTrigZero f a b = trigZeroJoin $ fmap (\a -> fmap (\b -> f a b)  b) a

-- ************************************************************ --

-- set

setMix, (|=|) :: Unionable a => Signal a -> Signal a -> Signal a
setMix = opMix (flip union)
(|=|) = setMix

setIn, (|=) :: Unionable a => Signal a -> Signal a -> Signal a
setIn = opIn (flip union)
(|=) = setIn

setOut, (=|) :: Unionable a => Signal a -> Signal a -> Signal a
setOut = opOut (flip union)
(=|) = setOut

setSqueeze, (||=) :: Unionable a => Signal a -> Signal a -> Signal a
setSqueeze = opSqueeze (flip union)
(||=) = setSqueeze

setTrig, (!=) :: Unionable a => Signal a -> Signal a -> Signal a
setTrig = opTrig (flip union)
(!=) = setTrig

setTrigZero, (!!=) :: Unionable a => Signal a -> Signal a -> Signal a
setTrigZero = opTrigZero (flip union)
(!!=) = setTrigZero

infix 4 |=|, |=, =|, ||=, !=, !!=

-- keep

keepMix, (|.|) :: Unionable a => Signal a -> Signal a -> Signal a
keepMix = opMix (union)
(|.|) = keepMix

keepIn, (|.) :: Unionable a => Signal a -> Signal a -> Signal a
keepIn = opIn (union)
(|.) = keepIn

keepOut, (.|) :: Unionable a => Signal a -> Signal a -> Signal a
keepOut = opOut (union)
(.|) = keepOut

keepSqueeze, (||.) :: Unionable a => Signal a -> Signal a -> Signal a
keepSqueeze = opSqueeze (union)
(||.) = keepSqueeze

keepTrig, (!.) :: Unionable a => Signal a -> Signal a -> Signal a
keepTrig = opTrig (union)
(!.) = keepTrig

keepTrigZero, (!!.) :: Unionable a => Signal a -> Signal a -> Signal a
keepTrigZero = opTrigZero (union)
(!!.) = keepTrigZero

infix 4 |.|, |., .|, ||., !., !!.

-- add

addMix, (|+|) :: Num a => Signal a -> Signal a -> Signal a
addMix = opMix (+)
(|+|) = addMix

addIn, (|+) :: Num a => Signal a -> Signal a -> Signal a
addIn = opIn (+)
(|+) = addIn

addOut, (+|) :: Num a => Signal a -> Signal a -> Signal a
addOut = opOut (+)
(+|) = addOut

addSqueeze, (||+) :: Num a => Signal a -> Signal a -> Signal a
addSqueeze = opSqueeze (+)
(||+) = addSqueeze

addTrig, (!+) :: Num a => Signal a -> Signal a -> Signal a
addTrig = opTrig (+)
(!+) = addTrig

addTrigZero, (!!+) :: Num a => Signal a -> Signal a -> Signal a
addTrigZero = opTrigZero (+)
(!!+) = addTrigZero

infix 4 |+|, |+, +|, ||+, !+, !!+

-- sub

subMix, (|-|) :: Num a => Signal a -> Signal a -> Signal a
subMix = opMix (-)
(|-|) = subMix

subIn, (|-) :: Num a => Signal a -> Signal a -> Signal a
subIn = opIn (-)
(|-) = subIn

subOut, (-|) :: Num a => Signal a -> Signal a -> Signal a
subOut = opOut (-)
(-|) = subOut

subSqueeze, (||-) :: Num a => Signal a -> Signal a -> Signal a
subSqueeze = opSqueeze (-)
(||-) = subSqueeze

subTrig, (!-) :: Num a => Signal a -> Signal a -> Signal a
subTrig = opTrig (-)
(!-) = subTrig

subTrigZero, (!!-) :: Num a => Signal a -> Signal a -> Signal a
subTrigZero = opTrigZero (-)
(!!-) = subTrigZero

infix 4 |-|, |-, -|, ||-, !-, !!-

-- mul

mulMix, (|*|) :: Num a => Signal a -> Signal a -> Signal a
mulMix = opMix (*)
(|*|) = mulMix

mulIn, (|*) :: Num a => Signal a -> Signal a -> Signal a
mulIn = opIn (*)
(|*) = mulIn

mulOut, (*|) :: Num a => Signal a -> Signal a -> Signal a
mulOut = opOut (*)
(*|) = mulOut

mulSqueeze, (||*) :: Num a => Signal a -> Signal a -> Signal a
mulSqueeze = opSqueeze (*)
(||*) = mulSqueeze

mulTrig, (!*) :: Num a => Signal a -> Signal a -> Signal a
mulTrig = opTrig (*)
(!*) = mulTrig

mulTrigZero, (!!*) :: Num a => Signal a -> Signal a -> Signal a
mulTrigZero = opTrigZero (*)
(!!*) = mulTrigZero

infix 4 |*|, |*, *|, ||*, !*, !!*

-- div

divMix, (|/|) :: Fractional a => Signal a -> Signal a -> Signal a
divMix = opMix (/)
(|/|) = divMix

divIn, (|/) :: Fractional a => Signal a -> Signal a -> Signal a
divIn = opIn (/)
(|/) = divIn

divOut, (/|) :: Fractional a => Signal a -> Signal a -> Signal a
divOut = opOut (/)
(/|) = divOut

divSqueeze, (||/) :: Fractional a => Signal a -> Signal a -> Signal a
divSqueeze = opSqueeze (/)
(||/) = divSqueeze

divTrig, (!/) :: Fractional a => Signal a -> Signal a -> Signal a
divTrig = opTrig (/)
(!/) = divTrig

divTrigZero, (!!/) :: Fractional a => Signal a -> Signal a -> Signal a
divTrigZero = opTrigZero (/)
(!!/) = divTrigZero

infix 4 |/|, |/, /|, ||/, !/, !!/

-- mod

modMix, (|%|) :: Integral a => Signal a -> Signal a -> Signal a
modMix = opMix (mod)
(|%|) = modMix

modIn, (|%) :: Integral a => Signal a -> Signal a -> Signal a
modIn = opIn (mod)
(|%) = modIn

modOut, (%|) :: Integral a => Signal a -> Signal a -> Signal a
modOut = opOut (mod)
(%|) = modOut

modSqueeze, (||%) :: Integral a => Signal a -> Signal a -> Signal a
modSqueeze = opSqueeze (mod)
(||%) = modSqueeze

modTrig, (!%) :: Integral a => Signal a -> Signal a -> Signal a
modTrig = opTrig (mod)
(!%) = modTrig

modTrigZero, (!!%) :: Integral a => Signal a -> Signal a -> Signal a
modTrigZero = opTrigZero (mod)
(!!%) = modTrigZero

infix 4 |%|, |%, %|, ||%, !%, !!%

-- pow

powMix, (|^|) :: Integral a => Signal a -> Signal a -> Signal a
powMix = opMix (^)
(|^|) = powMix

powIn, (|^) :: Integral a => Signal a -> Signal a -> Signal a
powIn = opIn (^)
(|^) = powIn

powOut, (^|) :: Integral a => Signal a -> Signal a -> Signal a
powOut = opOut (^)
(^|) = powOut

powSqueeze, (||^) :: Integral a => Signal a -> Signal a -> Signal a
powSqueeze = opSqueeze (^)
(||^) = powSqueeze

powTrig, (!^) :: Integral a => Signal a -> Signal a -> Signal a
powTrig = opTrig (^)
(!^) = powTrig

powTrigZero, (!!^) :: Integral a => Signal a -> Signal a -> Signal a
powTrigZero = opTrigZero (^)
(!!^) = powTrigZero

infix 4 |^|, |^, ^|, ||^, !^, !!^

-- band

bandMix, (|.&.|) :: Bits a => Signal a -> Signal a -> Signal a
bandMix = opMix (.&.)
(|.&.|) = bandMix

bandIn, (|.&.) :: Bits a => Signal a -> Signal a -> Signal a
bandIn = opIn (.&.)
(|.&.) = bandIn

bandOut, (.&.|) :: Bits a => Signal a -> Signal a -> Signal a
bandOut = opOut (.&.)
(.&.|) = bandOut

bandSqueeze, (||.&.) :: Bits a => Signal a -> Signal a -> Signal a
bandSqueeze = opSqueeze (.&.)
(||.&.) = bandSqueeze

bandTrig, (!.&.) :: Bits a => Signal a -> Signal a -> Signal a
bandTrig = opTrig (.&.)
(!.&.) = bandTrig

bandTrigZero, (!!.&.) :: Bits a => Signal a -> Signal a -> Signal a
bandTrigZero = opTrigZero (.&.)
(!!.&.) = bandTrigZero

infix 4 |.&.|, |.&., .&.|, ||.&., !.&., !!.&.

-- bor

borMix, (|.|.|) :: Bits a => Signal a -> Signal a -> Signal a
borMix = opMix (.|.)
(|.|.|) = borMix

borIn, (|.|.) :: Bits a => Signal a -> Signal a -> Signal a
borIn = opIn (.|.)
(|.|.) = borIn

borOut, (.|.|) :: Bits a => Signal a -> Signal a -> Signal a
borOut = opOut (.|.)
(.|.|) = borOut

borSqueeze, (||.|.) :: Bits a => Signal a -> Signal a -> Signal a
borSqueeze = opSqueeze (.|.)
(||.|.) = borSqueeze

borTrig, (!.|.) :: Bits a => Signal a -> Signal a -> Signal a
borTrig = opTrig (.|.)
(!.|.) = borTrig

borTrigZero, (!!.|.) :: Bits a => Signal a -> Signal a -> Signal a
borTrigZero = opTrigZero (.|.)
(!!.|.) = borTrigZero

infix 4 |.|.|, |.|., .|.|, ||.|., !.|., !!.|.

-- bxor

bxorMix, (|.^.|) :: Bits a => Signal a -> Signal a -> Signal a
bxorMix = opMix (xor)
(|.^.|) = bxorMix

bxorIn, (|.^.) :: Bits a => Signal a -> Signal a -> Signal a
bxorIn = opIn (xor)
(|.^.) = bxorIn

bxorOut, (.^.|) :: Bits a => Signal a -> Signal a -> Signal a
bxorOut = opOut (xor)
(.^.|) = bxorOut

bxorSqueeze, (||.^.) :: Bits a => Signal a -> Signal a -> Signal a
bxorSqueeze = opSqueeze (xor)
(||.^.) = bxorSqueeze

bxorTrig, (!.^.) :: Bits a => Signal a -> Signal a -> Signal a
bxorTrig = opTrig (xor)
(!.^.) = bxorTrig

bxorTrigZero, (!!.^.) :: Bits a => Signal a -> Signal a -> Signal a
bxorTrigZero = opTrigZero (xor)
(!!.^.) = bxorTrigZero

infix 4 |.^.|, |.^., .^.|, ||.^., !.^., !!.^.

-- bshiftl

bshiftlMix, (|.<<.|) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftlMix = opMix (shiftL)
(|.<<.|) = bshiftlMix

bshiftlIn, (|.<<.) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftlIn = opIn (shiftL)
(|.<<.) = bshiftlIn

bshiftlOut, (.<<.|) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftlOut = opOut (shiftL)
(.<<.|) = bshiftlOut

bshiftlSqueeze, (||.<<.) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftlSqueeze = opSqueeze (shiftL)
(||.<<.) = bshiftlSqueeze

bshiftlTrig, (!.<<.) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftlTrig = opTrig (shiftL)
(!.<<.) = bshiftlTrig

bshiftlTrigZero, (!!.<<.) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftlTrigZero = opTrigZero (shiftL)
(!!.<<.) = bshiftlTrigZero

infix 4 |.<<.|, |.<<., .<<.|, ||.<<., !.<<., !!.<<.

-- bshiftr

bshiftrMix, (|.>>.|) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftrMix = opMix (shiftR)
(|.>>.|) = bshiftrMix

bshiftrIn, (|.>>.) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftrIn = opIn (shiftR)
(|.>>.) = bshiftrIn

bshiftrOut, (.>>.|) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftrOut = opOut (shiftR)
(.>>.|) = bshiftrOut

bshiftrSqueeze, (||.>>.) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftrSqueeze = opSqueeze (shiftR)
(||.>>.) = bshiftrSqueeze

bshiftrTrig, (!.>>.) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftrTrig = opTrig (shiftR)
(!.>>.) = bshiftrTrig

bshiftrTrigZero, (!!.>>.) :: Bits a => Signal a -> Signal Int -> Signal a
bshiftrTrigZero = opTrigZero (shiftR)
(!!.>>.) = bshiftrTrigZero

infix 4 |.>>.|, |.>>., .>>.|, ||.>>., !.>>., !!.>>.

-- lt

ltMix, (|<|) :: Ord a => Signal a -> Signal a -> Signal Bool
ltMix = opMix (<)
(|<|) = ltMix

ltIn, (|<) :: Ord a => Signal a -> Signal a -> Signal Bool
ltIn = opIn (<)
(|<) = ltIn

ltOut, (<|) :: Ord a => Signal a -> Signal a -> Signal Bool
ltOut = opOut (<)
(<|) = ltOut

ltSqueeze, (||<) :: Ord a => Signal a -> Signal a -> Signal Bool
ltSqueeze = opSqueeze (<)
(||<) = ltSqueeze

ltTrig, (!<) :: Ord a => Signal a -> Signal a -> Signal Bool
ltTrig = opTrig (<)
(!<) = ltTrig

ltTrigZero, (!!<) :: Ord a => Signal a -> Signal a -> Signal Bool
ltTrigZero = opTrigZero (<)
(!!<) = ltTrigZero

infix 4 |<|, |<, <|, ||<, !<, !!<

-- gt

gtMix, (|>|) :: Ord a => Signal a -> Signal a -> Signal Bool
gtMix = opMix (>)
(|>|) = gtMix

gtIn, (|>) :: Ord a => Signal a -> Signal a -> Signal Bool
gtIn = opIn (>)
(|>) = gtIn

gtOut, (>|) :: Ord a => Signal a -> Signal a -> Signal Bool
gtOut = opOut (>)
(>|) = gtOut

gtSqueeze, (||>) :: Ord a => Signal a -> Signal a -> Signal Bool
gtSqueeze = opSqueeze (>)
(||>) = gtSqueeze

gtTrig, (!>) :: Ord a => Signal a -> Signal a -> Signal Bool
gtTrig = opTrig (>)
(!>) = gtTrig

gtTrigZero, (!!>) :: Ord a => Signal a -> Signal a -> Signal Bool
gtTrigZero = opTrigZero (>)
(!!>) = gtTrigZero

infix 4 |>|, |>, >|, ||>, !>, !!>

-- lte

lteMix, (|<=|) :: Ord a => Signal a -> Signal a -> Signal Bool
lteMix = opMix (<=)
(|<=|) = lteMix

lteIn, (|<=) :: Ord a => Signal a -> Signal a -> Signal Bool
lteIn = opIn (<=)
(|<=) = lteIn

lteOut, (<=|) :: Ord a => Signal a -> Signal a -> Signal Bool
lteOut = opOut (<=)
(<=|) = lteOut

lteSqueeze, (||<=) :: Ord a => Signal a -> Signal a -> Signal Bool
lteSqueeze = opSqueeze (<=)
(||<=) = lteSqueeze

lteTrig, (!<=) :: Ord a => Signal a -> Signal a -> Signal Bool
lteTrig = opTrig (<=)
(!<=) = lteTrig

lteTrigZero, (!!<=) :: Ord a => Signal a -> Signal a -> Signal Bool
lteTrigZero = opTrigZero (<=)
(!!<=) = lteTrigZero

infix 4 |<=|, |<=, <=|, ||<=, !<=, !!<=

-- gte

gteMix, (|>=|) :: Ord a => Signal a -> Signal a -> Signal Bool
gteMix = opMix (>=)
(|>=|) = gteMix

gteIn, (|>=) :: Ord a => Signal a -> Signal a -> Signal Bool
gteIn = opIn (>=)
(|>=) = gteIn

gteOut, (>=|) :: Ord a => Signal a -> Signal a -> Signal Bool
gteOut = opOut (>=)
(>=|) = gteOut

gteSqueeze, (||>=) :: Ord a => Signal a -> Signal a -> Signal Bool
gteSqueeze = opSqueeze (>=)
(||>=) = gteSqueeze

gteTrig, (!>=) :: Ord a => Signal a -> Signal a -> Signal Bool
gteTrig = opTrig (>=)
(!>=) = gteTrig

gteTrigZero, (!!>=) :: Ord a => Signal a -> Signal a -> Signal Bool
gteTrigZero = opTrigZero (>=)
(!!>=) = gteTrigZero

infix 4 |>=|, |>=, >=|, ||>=, !>=, !!>=

-- eq

eqMix, (|==|) :: Eq a => Signal a -> Signal a -> Signal Bool
eqMix = opMix (==)
(|==|) = eqMix

eqIn, (|==) :: Eq a => Signal a -> Signal a -> Signal Bool
eqIn = opIn (==)
(|==) = eqIn

eqOut, (==|) :: Eq a => Signal a -> Signal a -> Signal Bool
eqOut = opOut (==)
(==|) = eqOut

eqSqueeze, (||==) :: Eq a => Signal a -> Signal a -> Signal Bool
eqSqueeze = opSqueeze (==)
(||==) = eqSqueeze

eqTrig, (!==) :: Eq a => Signal a -> Signal a -> Signal Bool
eqTrig = opTrig (==)
(!==) = eqTrig

eqTrigZero, (!!==) :: Eq a => Signal a -> Signal a -> Signal Bool
eqTrigZero = opTrigZero (==)
(!!==) = eqTrigZero

infix 4 |==|, |==, ==|, ||==, !==, !!==

-- ne

neMix, (|/=|) :: Eq a => Signal a -> Signal a -> Signal Bool
neMix = opMix (/=)
(|/=|) = neMix

neIn, (|/=) :: Eq a => Signal a -> Signal a -> Signal Bool
neIn = opIn (/=)
(|/=) = neIn

neOut, (/=|) :: Eq a => Signal a -> Signal a -> Signal Bool
neOut = opOut (/=)
(/=|) = neOut

neSqueeze, (||/=) :: Eq a => Signal a -> Signal a -> Signal Bool
neSqueeze = opSqueeze (/=)
(||/=) = neSqueeze

neTrig, (!/=) :: Eq a => Signal a -> Signal a -> Signal Bool
neTrig = opTrig (/=)
(!/=) = neTrig

neTrigZero, (!!/=) :: Eq a => Signal a -> Signal a -> Signal Bool
neTrigZero = opTrigZero (/=)
(!!/=) = neTrigZero

infix 4 |/=|, |/=, /=|, ||/=, !/=, !!/=

-- and

andMix, (|&&|) :: Signal Bool -> Signal Bool -> Signal Bool
andMix = opMix (&&)
(|&&|) = andMix

andIn, (|&&) :: Signal Bool -> Signal Bool -> Signal Bool
andIn = opIn (&&)
(|&&) = andIn

andOut, (&&|) :: Signal Bool -> Signal Bool -> Signal Bool
andOut = opOut (&&)
(&&|) = andOut

andSqueeze, (||&&) :: Signal Bool -> Signal Bool -> Signal Bool
andSqueeze = opSqueeze (&&)
(||&&) = andSqueeze

andTrig, (!&&) :: Signal Bool -> Signal Bool -> Signal Bool
andTrig = opTrig (&&)
(!&&) = andTrig

andTrigZero, (!!&&) :: Signal Bool -> Signal Bool -> Signal Bool
andTrigZero = opTrigZero (&&)
(!!&&) = andTrigZero

infix 4 |&&|, |&&, &&|, ||&&, !&&, !!&&

-- or

orMix, (|.||.|) :: Signal Bool -> Signal Bool -> Signal Bool
orMix = opMix (||)
(|.||.|) = orMix

orIn, (|.||.) :: Signal Bool -> Signal Bool -> Signal Bool
orIn = opIn (||)
(|.||.) = orIn

orOut, (.||.|) :: Signal Bool -> Signal Bool -> Signal Bool
orOut = opOut (||)
(.||.|) = orOut

orSqueeze, (||.||.) :: Signal Bool -> Signal Bool -> Signal Bool
orSqueeze = opSqueeze (||)
(||.||.) = orSqueeze

orTrig, (!.||.) :: Signal Bool -> Signal Bool -> Signal Bool
orTrig = opTrig (||)
(!.||.) = orTrig

orTrigZero, (!!.||.) :: Signal Bool -> Signal Bool -> Signal Bool
orTrigZero = opTrigZero (||)
(!!.||.) = orTrigZero

infix 4 |.||.|, |.||., .||.|, ||.||., !.||., !!.||.


